---
layout: post
title:  "(파트-2) Express.js 를 이용한 파일 다운로드 서버 개발"
subtitle: "임시 URL 을 이용한 파일 다운로드 서버 개발하기"
author: "코마 (gbkim1988@gmail.com)"
date:   2019-09-07 00:00:00 +0900
categories: [ "download", "tempurl", "express.js", "15m"]
excerpt_separator: <!--more-->
---

안녕하세요 **코마**입니다. "*(파트-1) Express.js를 이용한 파일 다운로드 서버 개발*" 을 통해 Nginx 를 설치하고 구성하는 방법을 다루었습니다. 오늘은 Express.js 를 이용하여 실제 파일 다운로드 서버를 구성해 보도록 하겠습니다. 임시 URL 생성하는 방법, 구매 정보를 바탕으로 인증키를 생성하는 방법에 초점을 맞추어 주시길 바랍니다.

<!--more-->

## Express 서버란

Express 서버는 Node.js 를 기반으로 개발된 웹 어플리케이션입니다. 간편한 인터페이스를 통해 쉽게 어플리케이션 개발이 가능합니다. 매우 유연하기 때문에 npm 에 있는 수많은 모듈을 이용할 수 있는 장점이 있습니다. 또한, Node.js 재단(foundation)에 의해서 유지되고 있는 오픈소스 이므로 향후 발전 가능성이 더 크므로 기술 스택을 고민하시는 분들에게 추천 드립니다. 

그러나 모든 기술에는 장점과 단점이 있습니다. 장점에 호도되기 보다는 단점을 우선 정확하게 파악하고 단점을 보안하는 방향으로 구현하는 것이 올바르다고 생각합니다. 따라서, 단점부터 언급하도록 하겠습니다.


## Express 의 단점

전술한 바와 같이 Express 는 매우 간편하고 사용하기에 쉽습니다. 하지만, 개발을 착수하기 전에 프로젝트의 복잡성과 규모를 먼저 생각해야 합니다. 그리고 이 과정에서 맞닥뜨릴 수 있는 문제점들의 목록은 아래와 같습니다. 또한, 단점이라고 하여 무조건 나쁘다는 것은 아닙니다. 다만, 개발하기 전에 고려할 요소들이 있음을 의미합니다.

- Event 주도 특성(콜백)
- 플러그인 철학
- 코드 구성

각각의 내용을 한번 살펴볼까요?

### Event 주도 특성

Node.js 는 단일 스레드 프레임워크입니다. 즉, 이벤트 루프가 다양한 이벤트를 수신하고 등록된 콜백(callbacks) 함수를 실행하는 구조입니다. 만약 여러분이 다른 언어로 개발을 해보았다면 콜백의 특성을 이해하기 어려울 수 있습니다. (이 부분은 코딩 스타일에 대한 내용입니다. 가볍게 짚고 넘어가기엔 내용이 좀 길어 따로 포스팅하도록 하겠습니다.)

콜백을 다룰 때 주의해야 할 점이 발생합니다. 아래의 상황을 생각해 볼까요?

> **코마**는 2 메가바이트의 파일을 읽어들여 클라이언트로 전송하는 API 로직을 작성하였다. 이 파일은 단순히 내려주는 것이 아니라 다운로드하는 사용자의 정보를 파일에 카빙한 뒤에 전송해야만 한다.

위의 상황을 Node.js 의 관점으로 해석해 보겠습니다. 파일을 읽어들여야 하므로 이는 비동기로 작성되는 것이 효율적입니다. 그리고 모든 비동기 함수들은 결과 여부에 상관없이 콜백을 호출하도록 되어 있습니다. 따라서, 아래와 같은 코드 스타일이 만들어집니다.

```js
// fsutil.js
const fs = require('fs');
module.exports = {
  readHugeFile: function (src) {
    fs.readFile(src, function(err, file) {
      if (err)
        handleError(err);
      /* 200 줄 가량의 파일 카빙 코드 ..... */
    }) 
  }
}
```

위의 코드에서 fs.readFile API 호출 시 인자로 함수가 전달되는 것을 알 수 있습니다. 이 함수가 바로 callback 함수입니다. 동기 방식의 구조에서는 함수의 리턴 값에 의존하게 됩니다. 그러나 비동기 방식의 경우 리턴 값을 받아서 구현할 수 없습니다. (*물론 async/await 를 사용하는 경우 구현이 가능합니다만 이 내용은 나중에 언급하도록 하겠습니다.*)

여기서 `fs.readFile` 의 콜백 함수에 파일의 내용을 카빙하는 코드가 들어간다고 가정해볼까요? 대략 200줄  정도되는 알고리즘을 구성한다고 하였을 때 코드 관리가 어려워지게 됩니다. 이른바 콜백 지옥(callback hell)이 열리는 셈입니다.

Node.js 는 이벤트 주도 개발(Event-driven development)에서 발생하는 특성을 보완하기 위해 async/await 를 도입하였습니다. 따라서, 콜백 함수에 의존하는 형태에서 자유로워 졌습니다. 

그러나, 여전히 개발자 분들은 이 점을 정확히 인지하시고 개발해야만 합니다.

### 플러그인 철학

Express 서버는 이른바 "플러그인 철학"에 기초하여 구현되었습니다. 미들웨어라고 알려진 이 플러그인은 반드시 이해해야 할 중요한 개념입니다. 

클라이어트의 요청에 서버가 응답하는 과정에 실행되는 줄이어 이어진 함수들의 부분집합(subset)을 의미합니다.

따라서, 미들웨어 개념을 정확히 인지하지 않고 개발을 할 경우 요청에 적절히 응답하지 않는 디버깅 상황에 직면할 수 있습니다.

### 코드 구성

코드 구성은 유지 보수에 초점이 맞추어진 관점입니다. 유연함과 함께 개발자에게 코딩 스타일을 일관되게 유지해야하는 과제가 주어졌습니다. 따라서, 코딩 작업 시 아래와 같은 규칙이 필요합니다.

- 전체 개발 프로세스 과정에서 단일 코딩 스타일을 선택하고 이를 준수한다.
- 소스 파일의 크기를 적절히 관리해야 한다. 너무 크기가 크다면 이를 적절히 분할해야한다. 
  - 통상 100 줄 정도를 기준으로 합니다.
- Javascript 는 가장 빨리 발전하는 언어중 하나 입니다. 
  - 따라서, Node.js 와 Express.js 의 최신 동향과 업데이트에 주목합니다.










## 마무리

드디어 Vue.js 공식 문서 정복(뽀개기) 과정에서 Vue 인스턴스 영역이 완료되었습니다! 👏 (짝짝짝) 이 과정은 모든 문서를 정복할 때까지 매일 매일 업로드 하도록 할테니 내일 이 시간에도 시간을 내어 [코마의 훈훈한 블로그](https://code-machina.github.io) 를 찾아주세요!

<br>
{% include advertisements.html %}
<br>

다음 시간에는 `템플릿 문법`을 완벽하게 이해하실 수 있도록 정리해보도록 하겠습니다.

아직 드릴 이야기가 무궁무진하니 좀 더 지켜봐주시면 더욱 감사할 것 같아요! 여러분이 Vue.js 를 장난감처럼 가지고 노는 그날까지 저 **코마**는 멈추지 않겠습니다. 대한민국 IT인 여러분들의 건승을 기원합니다.

지금까지 **코마** 였습니다.

구독해주셔서 감사합니다. 더욱 좋은 내용으로 찾아뵙도록 하겠습니다. 감사합니다

## 링크 정리

이번 시간에 참조한 링크는 아래와 같습니다. 잘 정리하셔서 필요할 때 사용하시길 바랍니다.

- [Express Mobile App Development](https://apiko.com/blog/express-mobile-app-development/)
- [Callback Hell](https://callbackhell.com/)
- [Javascript: Callbacks](https://javascript.info/callbacks)
- [Node.js : About Exports](https://www.sitepoint.com/understanding-module-exports-exports-node-js/)
- [Javascript : Function Hoisting](https://gist.github.com/maxogden/4bed247d9852de93c94c)


<br>
{% include advertisements.html %}
<br>
