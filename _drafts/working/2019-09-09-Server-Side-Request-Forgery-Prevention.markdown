---
layout: post
title:  "SSRF 예방법 (Server Side Request Forgery Prevention)"
subtitle: "알면 쉽지만 모르면 어려운 보안"
author: "코마 (gbkim1988@gmail.com)"
date:   2019-09-09 00:00:00 +0900
categories: [ "ssrf", "security", "mitigation", "15m"]
excerpt_separator: <!--more-->
---

안녕하세요 **코마**입니다. 오늘은 SSRF 라는 공격 기법에 대해 알아보고 효과적인 보안 방법을 모색해보려고 합니다. 

<!--more-->

## SSRF 란?

혹시 CSRF 라는 공격에 대해서 들어보신적이 있나요? 아마도 많은 분들이 XSS와 함께 가장 많이 발생하는 공격으로 알고 있을 것 같네요.

SSRF 는 CSRF 와 유사한 공격 방식입니다. CSRF는 클라이언트로 하여금 공격자가 강제한 제어 동작을 수행하도록 하는 공격 방식입니다. 대신, SSRF 는 서버로 하여금 공격자가 강제한 제어 동적을 수행하도록 하는 공격 방식입니다. 

공격의 대상이 클라이언트에서 서버로 바뀐 것입니다. 그렇다면 어떻게 이러한 공격이 가능하게 되었을까요?

이는, 신뢰 주체에 대한 맹목적인 믿음으로 인해 신뢰 주체가 제공한 데이터를 완벽히 신뢰할 경우 발생하는 취약점입니다. 아래의 조건을 살펴볼까요?

1. 클라이언트의 요청(claim)을 요청하는 서버가 2개가 존재합니다.
2. 서버 A는 서버 B의 정보를 수신한 뒤에 이를 클라이언트에 반영합니다.
  - MSA 구조에서 흔히 발생하는 취약점으로 여겨집니다.
  - MSA 아키텍처에서는 서버간의 대화를 통해 서로 다른 정보를 조인하는 과정을 수행합니다.
    - Graphql 과 같은 기술을 떠올려 보실까요?
3. SSRF 의 취약점이 발생할 경우 어떤 서버가 취약하다고 판단될까요? 
  - 서버 A에서 요청(Claim)을 무분별하게 신뢰하였으므로 취약한 서버(어플리케이션)이라고 판단합니다.

[![SSRF 공격 구성도](https://raw.githubusercontent.com/OWASP/CheatSheetSeries/master/assets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet_SSRF_Common_Flow.png)](https://raw.githubusercontent.com/OWASP/CheatSheetSeries/master/assets/Server_Side_Request_Forgery_Prevention_Cheat_Sheet_SSRF_Common_Flow.png)

### 공격 발생 상황

여러분의 어플리케이션이 아래의 구현을 하고 있다면 SSRF 의 가능성을 염두해두고 코드를 진단해 보아야 합니다. SSRF 의 공격 벡터는 위에서 장황하게 설명하였지만 결국은 아래와 같이 정의할 수 있습니다.

**공격 벡터의 일종으로 내부/외부 네트워크와 통신하는 어플리케이션을 악용함을 의미합니다.**

대표적으로 URL 처리 과정에서 이러한 공격 벡터가 드러나는데요. 아래의 예를 살펴보겠습니다.

1. 외부 서버의 이미지 URL
  - 만약 어플리케이션이 다른 서비스의 이미지를 다운로드하여 저장한다고 가정하게 될 경우 공격 벡터가 보입니다.
2. 사용자 정의 웹훅(Webhook)
  - 웹훅은 Git, Jenkins 에서도 많은 쓰는 방법입니다. 특정 이벤트가 발생 시 지정된 URL로 콜백 리퀘스트를 전송하여 특정 이벤트의 발생을 다른 서비스에 알리는 경우입니다.
3. 내부까지 전파되는 사용자 요청
  - 즉, 어플리케이션이 내부 서비스까지 요청을 전파하는 경우입니다.

### 기억해야할 사항
  - SSRF 는 프로토콜에 제한을 받지 않습니다. 즉, FTP, SMB, SMTP 등의 다른 프로토콜이나 `file://`, `phar://`, `gopher://` 등의 URI 스킴(URI Scheme)등을 사용 가능합니다.
  - 만약 어플리케이션이 XXE 인젝션 공격에 취약하다면 SSRF 공격을 검토해볼만 합니다. 
    - XXE 인젝션 공격을 이미 코마는 다루었습니다. 이 [XXE 인젝션 방어]({% link _posts/2019/07/2019-07-28-How-to-prevent-XXE Injection.markdown %}) 참조해주세요! 

## SSRF 발동 조건

어플리케이션의 기능과 요구사항에 따라 SSRF 공격이 발생하는 케이스를 두 가지로 분류할 수 있습니다.

1. **사례 1**: 어플리케이션이 신뢰하는 어플리케이션에게 요청을 전송할 수 있을 때
2. **사례 2**: 어플리케이션이 어떠한 외부 IP 나 도메인으로 요청을 전송할 수 있을 때

## 사례 1

어플리케이션은 상황에 따라 다른 어플리케이션에게 요청을 전달할 필요가 있습니다. 다른 어플리케이션의 위치는 다른 네트워크 대역이거나 외부 서비스인 경우 등 다양합니다. 

이러한 구성은 모두 특정한 목적 혹은 비즈니스 요구사항에 따라서 달라집니다. 예를들어 쇼핑몰 A와 쇼핑몰 B의 상품 정보를 공유하는 제휴를 맺었다고 가정해보면 이해가 쉽습니다.

### HR 사례

여러분들이 주로 사용하였을만한 그룹웨어 시스템을 알아볼까요? 아래의 조건에 유념해 주세요.

1. 신규 그룹웨어는 HR 시스템에 접근하여 임직원의 프로필 정보를 요청한다.
2. 임직원은 HR 시스템에 접근할 수 없다.
3. 그룹웨어와 HR 시스템은 프로토콜을 통해서 통신한다.

만약에 여러분이 보안 담당자의 입장이고 공격자가 신규 그룹웨어를 악용할 가능성을 검토하고자 합니다. 일반적인 상황에서 임직원은 HR 시스템에 접근이 불가능합니다. 그러나 그룹웨어를 통해서 파라미터를 변조한다면 HR 시스템은 그룹웨어를 완전히 신뢰하고 요청한 정보를 제공할 수 밖에 없습니다.

### 방어 방법

이러한 류의 공격에 대해 시스템을 안전하게 보호하는 방법은 어플리케이션 계층과 네트워크 계층에 대해 각각 보안 강화(Hardening)를 합니다.

- 어플리케이션 계층

첫번째로 떠오르는 것은 입력값 검증(Input Validation)일 것입니다. 여기서 Orange Tsai는 화이트리스트 기반의 입력값 검증방법을 제안한다. 

내부 어플리케이션에 전송되는 요청은 아래의 정보로 구성됩니다.

- 문자열이 포함된 데이터
- IP 주소 정보
- 도메인 이름
- URL 정보

### 문자열

SSRF 관점에서 검증 코드가 적절한 위치에서 동작하여 합니다. 아래의 정규표현식을 통한 문자열 데이터 검증 과정을 살펴볼까요?

```java
// 단순한 포맷의 데이터에 대한 정규식 검증
if(Pattern.matches("[a-zA-Z0-9\\s\\-]{1,50}", userInput)){
    // 유효할 경우 처리를 지속
}else{
    // 그렇지 않을 경우 요청을 거절하고 처리를 중지
}
```

### 아이피 주소

SSRF 관점에서 아이피 주소 데이터에 대해 아래의 검증이 필요합니다.

1. IP 정보가 유효한 V4 또는 V6 주소인지를 확인
2. IP 주소가 신뢰하는 어플리케이션의 주소 인지 확인









세부적인 공격 사례는 차치해두고 이제 방어 방법을 알아볼까요? 저희는 역으로 방어 방법 속에서 공격을 유추하는 과정을 통해 다양한 각도에서 공격이 가지는 의의를 알아 볼까 합니다.


{% include advertisements.html %}

## 


## 마무리

드디어 Vue.js 공식 문서 정복(뽀개기) 과정에서 Vue 인스턴스 영역이 완료되었습니다! 👏 (짝짝짝) 이 과정은 모든 문서를 정복할 때까지 매일 매일 업로드 하도록 할테니 내일 이 시간에도 시간을 내어 [코마의 훈훈한 블로그](https://code-machina.github.io) 를 찾아주세요!

<br>
{% include advertisements.html %}
<br>

다음 시간에는 `템플릿 문법`을 완벽하게 이해하실 수 있도록 정리해보도록 하겠습니다.

아직 드릴 이야기가 무궁무진하니 좀 더 지켜봐주시면 더욱 감사할 것 같아요! 여러분이 Vue.js 를 장난감처럼 가지고 노는 그날까지 저 **코마**는 멈추지 않겠습니다. 대한민국 IT인 여러분들의 건승을 기원합니다.

지금까지 **코마** 였습니다.

구독해주셔서 감사합니다. 더욱 좋은 내용으로 찾아뵙도록 하겠습니다. 감사합니다

## 링크 정리

이번 시간에 참조한 링크는 아래와 같습니다. 잘 정리하셔서 필요할 때 사용하시길 바랍니다.

- [Vue.js 2.x : Guide Docs](https://vuejs.org/v2/guide/index.html)

<br>
{% include advertisements.html %}
<br>
